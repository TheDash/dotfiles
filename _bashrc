#!/usr/bin/env bash

#---------------------------
# Shell Options
#---------------------------

# System bashrc
test -r /etc/bashrc && . /etc/bashrc

# Aliases
source ~/.bash_aliases

# Notify immedetely when background jobs exit
set -o notify

# Shell options
shopt -s cdspell                    # Check cd spelling
shopt -s extglob                    # Extended pattern matching
shopt -s histappend                 # Append history on exit
shopt -s hostcomplete               # Attempt to complete hostname after '@'
shopt -s interactive_comments       # Allow comments in interactive
shopt -u mailwarn                   # Don't tell me about mail, please.
shopt -s no_empty_cmd_completion    # Don't complete on an empty line.

unset MAILCHECK                     # Dont tell me about mail, please.

#----------------------
# PATH Extensions
#----------------------

test -d "$HOME/bin" && PATH="$HOME/bin:$PATH"
test -d "$HOME/devel/bin" && PATH="$HOME/devel/bin:$PATH"

#----------------------
# Environment Config
#----------------------

case "$-" in
    *i*) INTERACTIVE=yes ;; # This shell is interactive
    *) unset INTERACTIVE ;; # This shell is not interactive
esac

case "$0" in
    -*) LOGIN=yes ;;
    *) unset LOGIN ;;
esac

# Some filetypes to ignore
FIGNORE="~:CVS:#:.pyc:.swp:.swa"

# HISTORY
export HISTCONTROL="ignoreboth"                 # Ignore space and duplicates 
export HISTSIZE=10000
export HISTFILESIZE=10000
export HISTTIMEFORMAT="[%D %T]"
export HISTIGNORE="fg*:bg*:history*"
shopt -s cmdhist                                # Save multiline in one line
shopt -s histreedit                             # Reedit failed substitution

#--------------------
# Pager and Editor
#--------------------

HAVE_VIM=$(command -v vim)
HAVE_GVIM=$(command -v gvim)
HAVE_NANO=$(command -v nano)
HAVE_MATE=$(command -v mate)
HAVE_SUBL=$(command -v subl)

# If no vim default to vi
test -n "$HAVE_VIM" && EDITOR=vim || EDITOR=vi
# If sublime text and DISPLAY is set, override vim/vi
test -n "$HAVE_SUBL" && test -n "$DISPLAY:+x" && EDITOR='subl -w'
export EDITOR

# PAGER
if test -n "$(command -v less)" ; then
    PAGER="less -FirSwX"
    MANPAGER="less -FiRswX"
else
    PAGER=more
    MANPAGER="$PAGER"
fi
export PAGER MANPAGER

# Ack
ACK_PAGER="$PAGER"
ACK_PAGER_COLOR="$PAGER"

export CLICOLOR="yes"

#-------------------
# LS
#-------------------

LS_COMMON="-hBG"

dircolors="$(type -P gdircolors dircolors | head -1)"
test -n "$dircolors" && {
    COLORS=/etc/DIR_COLORS
    test -e "/etc/DIR_COLORS.$TERM"         && COLORS="/etc/DIR_COLORS.$TERM"
    test -e "$HOME/.dircolors"              && COLORS="$HOME/.dircolors"
    test ! -e "$COLORS"                     && COLORS=
    eval `$dircolors --sh $COLORS`
}
unset dircolors

test -n "$LS_COMMON" &&
    alias ls="command ls $LS_COMMON"

alias ll="ls -l"
alias la="ls -a"
alias l.="ls -d .*"
alias dir="ls"



#----------------------
# Prompt 
#----------------------

source $HOME/.scripts/ps1_functions.sh

#ps1_set --prompt ∫ --notime --noseparator
ps1_set --prompt ∫ --notime 'S\:\ '

#----------------------
# Useful functions
#----------------------

# Pushes your ssh public key (ida) to the given remote host's authorized_keys
push_ssh_cert() {
    local _host
    test -f ~/.ssh/id_dsa.pub || ssh-keygen -t dsa
    for _host in "$@";
    do
        echo $_host
        ssh $_host 'touch ~/.ssh/authorized_keys'
        ssh $_host 'cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_dsa.pub
    done
}

# Extract... anything!
extract () 
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function ssh_rsub() {
    ssh -R 52698:localhost:52698 $1
}

# Get current host related info.
function ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
}

# -------------------------
# Bash Completion 
# -------------------------
test -z "$BASH_COMPLETION" && {
   bash=${BASH_VERSION%.*}; bmajor=${bash%.*}; bminor=${bash#*.}
   test -n "$PS1" && test $bmajor -gt 1 && {
       # search for a bash_completion file to source
       for f in \
           /usr/local/etc/bash_completion \
           /usr/pkg/etc/bash_completion \
           /opt/local/etc/bash_completion \
           /etc/bash_completion \
           ~/.bash_completion
       do
           test -f $f && {
               . $f
               break
           }
       done
   }
   unset bash bmajor bminor f
}

_expand() {
    return 0
}


#--------------------------
# Mac Specific
#--------------------------

if [ `uname` = Darwin ]; then
    echo -e "\033]50;SetProfile=\a"
    export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
    if which ccache >/dev/null; then
        export PATH=/usr/local/Cellar/ccache/3.1.8/libexec:$PATH
    fi
fi

# ---------------------------
# Closing Notes/User Specific
# ---------------------------

# ROS Stuff
test -r $HOME/.rosrc && . $HOME/.rosrc

# Tell me something nifty at login
test -n "$INTERACTIVE" -a -n "$LOGIN" && {
    uname -npsr
    uptime 2> /dev/null
}

# Go
export GOPATH=$HOME/devel/go:$GOPATH
export PATH=$HOME/devel/go/bin:$PATH


